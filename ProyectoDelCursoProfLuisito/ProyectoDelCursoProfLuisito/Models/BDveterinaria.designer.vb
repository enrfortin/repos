'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BDVeterinaria")>  _
Partial Public Class BDveterinariaDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCita(instance As Cita)
    End Sub
  Partial Private Sub UpdateCita(instance As Cita)
    End Sub
  Partial Private Sub DeleteCita(instance As Cita)
    End Sub
  Partial Private Sub InsertCitaMedicamento(instance As CitaMedicamento)
    End Sub
  Partial Private Sub UpdateCitaMedicamento(instance As CitaMedicamento)
    End Sub
  Partial Private Sub DeleteCitaMedicamento(instance As CitaMedicamento)
    End Sub
  Partial Private Sub InsertEstadoCita(instance As EstadoCita)
    End Sub
  Partial Private Sub UpdateEstadoCita(instance As EstadoCita)
    End Sub
  Partial Private Sub DeleteEstadoCita(instance As EstadoCita)
    End Sub
  Partial Private Sub InsertHistorialCita(instance As HistorialCita)
    End Sub
  Partial Private Sub UpdateHistorialCita(instance As HistorialCita)
    End Sub
  Partial Private Sub DeleteHistorialCita(instance As HistorialCita)
    End Sub
  Partial Private Sub InsertMascota(instance As Mascota)
    End Sub
  Partial Private Sub UpdateMascota(instance As Mascota)
    End Sub
  Partial Private Sub DeleteMascota(instance As Mascota)
    End Sub
  Partial Private Sub InsertMedicamento(instance As Medicamento)
    End Sub
  Partial Private Sub UpdateMedicamento(instance As Medicamento)
    End Sub
  Partial Private Sub DeleteMedicamento(instance As Medicamento)
    End Sub
  Partial Private Sub InsertPagina(instance As Pagina)
    End Sub
  Partial Private Sub UpdatePagina(instance As Pagina)
    End Sub
  Partial Private Sub DeletePagina(instance As Pagina)
    End Sub
  Partial Private Sub InsertPaginaTipoUsuario(instance As PaginaTipoUsuario)
    End Sub
  Partial Private Sub UpdatePaginaTipoUsuario(instance As PaginaTipoUsuario)
    End Sub
  Partial Private Sub DeletePaginaTipoUsuario(instance As PaginaTipoUsuario)
    End Sub
  Partial Private Sub InsertPersona(instance As Persona)
    End Sub
  Partial Private Sub UpdatePersona(instance As Persona)
    End Sub
  Partial Private Sub DeletePersona(instance As Persona)
    End Sub
  Partial Private Sub InsertSede(instance As Sede)
    End Sub
  Partial Private Sub UpdateSede(instance As Sede)
    End Sub
  Partial Private Sub DeleteSede(instance As Sede)
    End Sub
  Partial Private Sub InsertSexo(instance As Sexo)
    End Sub
  Partial Private Sub UpdateSexo(instance As Sexo)
    End Sub
  Partial Private Sub DeleteSexo(instance As Sexo)
    End Sub
  Partial Private Sub InsertTipoMascota(instance As TipoMascota)
    End Sub
  Partial Private Sub UpdateTipoMascota(instance As TipoMascota)
    End Sub
  Partial Private Sub DeleteTipoMascota(instance As TipoMascota)
    End Sub
  Partial Private Sub InsertTipoUsuario(instance As TipoUsuario)
    End Sub
  Partial Private Sub UpdateTipoUsuario(instance As TipoUsuario)
    End Sub
  Partial Private Sub DeleteTipoUsuario(instance As TipoUsuario)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertUsuarioMascota(instance As UsuarioMascota)
    End Sub
  Partial Private Sub UpdateUsuarioMascota(instance As UsuarioMascota)
    End Sub
  Partial Private Sub DeleteUsuarioMascota(instance As UsuarioMascota)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BDVeterinariaConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cita() As System.Data.Linq.Table(Of Cita)
		Get
			Return Me.GetTable(Of Cita)
		End Get
	End Property
	
	Public ReadOnly Property CitaMedicamento() As System.Data.Linq.Table(Of CitaMedicamento)
		Get
			Return Me.GetTable(Of CitaMedicamento)
		End Get
	End Property
	
	Public ReadOnly Property EstadoCita() As System.Data.Linq.Table(Of EstadoCita)
		Get
			Return Me.GetTable(Of EstadoCita)
		End Get
	End Property
	
	Public ReadOnly Property HistorialCita() As System.Data.Linq.Table(Of HistorialCita)
		Get
			Return Me.GetTable(Of HistorialCita)
		End Get
	End Property
	
	Public ReadOnly Property Mascota() As System.Data.Linq.Table(Of Mascota)
		Get
			Return Me.GetTable(Of Mascota)
		End Get
	End Property
	
	Public ReadOnly Property Medicamento() As System.Data.Linq.Table(Of Medicamento)
		Get
			Return Me.GetTable(Of Medicamento)
		End Get
	End Property
	
	Public ReadOnly Property Pagina() As System.Data.Linq.Table(Of Pagina)
		Get
			Return Me.GetTable(Of Pagina)
		End Get
	End Property
	
	Public ReadOnly Property PaginaTipoUsuario() As System.Data.Linq.Table(Of PaginaTipoUsuario)
		Get
			Return Me.GetTable(Of PaginaTipoUsuario)
		End Get
	End Property
	
	Public ReadOnly Property Persona() As System.Data.Linq.Table(Of Persona)
		Get
			Return Me.GetTable(Of Persona)
		End Get
	End Property
	
	Public ReadOnly Property Sede() As System.Data.Linq.Table(Of Sede)
		Get
			Return Me.GetTable(Of Sede)
		End Get
	End Property
	
	Public ReadOnly Property Sexo() As System.Data.Linq.Table(Of Sexo)
		Get
			Return Me.GetTable(Of Sexo)
		End Get
	End Property
	
	Public ReadOnly Property TipoMascota() As System.Data.Linq.Table(Of TipoMascota)
		Get
			Return Me.GetTable(Of TipoMascota)
		End Get
	End Property
	
	Public ReadOnly Property TipoUsuario() As System.Data.Linq.Table(Of TipoUsuario)
		Get
			Return Me.GetTable(Of TipoUsuario)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property UsuarioMascota() As System.Data.Linq.Table(Of UsuarioMascota)
		Get
			Return Me.GetTable(Of UsuarioMascota)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cita")>  _
Partial Public Class Cita
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDCITA As Integer
	
	Private _IIDUSUARIO As System.Nullable(Of Integer)
	
	Private _IIDTIPOMASCOTA As System.Nullable(Of Integer)
	
	Private _IIDMASCOTA As System.Nullable(Of Integer)
	
	Private _VDESCRIPCION As String
	
	Private _VMEDIDASTOMADAS As String
	
	Private _DFECHAENFERMO As System.Nullable(Of Date)
	
	Private _DFECHAINICIO As System.Nullable(Of Date)
	
	Private _PRECIOATENCION As System.Nullable(Of Decimal)
	
	Private _TOTALPAGAR As System.Nullable(Of Decimal)
	
	Private _IIDSEDE As System.Nullable(Of Integer)
	
	Private _IIDDOCTORASIGNACITAUSUARIO As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _IIDESTADOCITA As System.Nullable(Of Integer)
	
	Private _DFECHACITA As System.Nullable(Of Date)
	
	Private _CitaMedicamento As EntitySet(Of CitaMedicamento)
	
	Private _EstadoCita As EntityRef(Of EstadoCita)
	
	Private _Mascota As EntityRef(Of Mascota)
	
	Private _Sede As EntityRef(Of Sede)
	
	Private _TipoMascota As EntityRef(Of TipoMascota)
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Usuario1 As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDCITAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDCITAChanged()
    End Sub
    Partial Private Sub OnIIDUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDUSUARIOChanged()
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanged()
    End Sub
    Partial Private Sub OnIIDMASCOTAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDMASCOTAChanged()
    End Sub
    Partial Private Sub OnVDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnVDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnVMEDIDASTOMADASChanging(value As String)
    End Sub
    Partial Private Sub OnVMEDIDASTOMADASChanged()
    End Sub
    Partial Private Sub OnDFECHAENFERMOChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDFECHAENFERMOChanged()
    End Sub
    Partial Private Sub OnDFECHAINICIOChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDFECHAINICIOChanged()
    End Sub
    Partial Private Sub OnPRECIOATENCIONChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPRECIOATENCIONChanged()
    End Sub
    Partial Private Sub OnTOTALPAGARChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTOTALPAGARChanged()
    End Sub
    Partial Private Sub OnIIDSEDEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDSEDEChanged()
    End Sub
    Partial Private Sub OnIIDDOCTORASIGNACITAUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDDOCTORASIGNACITAUSUARIOChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnIIDESTADOCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDESTADOCITAChanged()
    End Sub
    Partial Private Sub OnDFECHACITAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDFECHACITAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CitaMedicamento = New EntitySet(Of CitaMedicamento)(AddressOf Me.attach_CitaMedicamento, AddressOf Me.detach_CitaMedicamento)
		Me._EstadoCita = CType(Nothing, EntityRef(Of EstadoCita))
		Me._Mascota = CType(Nothing, EntityRef(Of Mascota))
		Me._Sede = CType(Nothing, EntityRef(Of Sede))
		Me._TipoMascota = CType(Nothing, EntityRef(Of TipoMascota))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Usuario1 = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDCITA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDCITA() As Integer
		Get
			Return Me._IIDCITA
		End Get
		Set
			If ((Me._IIDCITA = value)  _
						= false) Then
				Me.OnIIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IIDCITA = value
				Me.SendPropertyChanged("IIDCITA")
				Me.OnIIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDUSUARIO", DbType:="Int")>  _
	Public Property IIDUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDUSUARIO
		End Get
		Set
			If (Me._IIDUSUARIO.Equals(value) = false) Then
				If Me._Usuario1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDUSUARIO = value
				Me.SendPropertyChanged("IIDUSUARIO")
				Me.OnIIDUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOMASCOTA", DbType:="Int")>  _
	Public Property IIDTIPOMASCOTA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDTIPOMASCOTA
		End Get
		Set
			If (Me._IIDTIPOMASCOTA.Equals(value) = false) Then
				If Me._TipoMascota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDTIPOMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOMASCOTA = value
				Me.SendPropertyChanged("IIDTIPOMASCOTA")
				Me.OnIIDTIPOMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDMASCOTA", DbType:="Int")>  _
	Public Property IIDMASCOTA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDMASCOTA
		End Get
		Set
			If (Me._IIDMASCOTA.Equals(value) = false) Then
				If Me._Mascota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDMASCOTA = value
				Me.SendPropertyChanged("IIDMASCOTA")
				Me.OnIIDMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VDESCRIPCION", DbType:="VarChar(200)")>  _
	Public Property VDESCRIPCION() As String
		Get
			Return Me._VDESCRIPCION
		End Get
		Set
			If (String.Equals(Me._VDESCRIPCION, value) = false) Then
				Me.OnVDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._VDESCRIPCION = value
				Me.SendPropertyChanged("VDESCRIPCION")
				Me.OnVDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VMEDIDASTOMADAS", DbType:="VarChar(300)")>  _
	Public Property VMEDIDASTOMADAS() As String
		Get
			Return Me._VMEDIDASTOMADAS
		End Get
		Set
			If (String.Equals(Me._VMEDIDASTOMADAS, value) = false) Then
				Me.OnVMEDIDASTOMADASChanging(value)
				Me.SendPropertyChanging
				Me._VMEDIDASTOMADAS = value
				Me.SendPropertyChanged("VMEDIDASTOMADAS")
				Me.OnVMEDIDASTOMADASChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFECHAENFERMO", DbType:="DateTime")>  _
	Public Property DFECHAENFERMO() As System.Nullable(Of Date)
		Get
			Return Me._DFECHAENFERMO
		End Get
		Set
			If (Me._DFECHAENFERMO.Equals(value) = false) Then
				Me.OnDFECHAENFERMOChanging(value)
				Me.SendPropertyChanging
				Me._DFECHAENFERMO = value
				Me.SendPropertyChanged("DFECHAENFERMO")
				Me.OnDFECHAENFERMOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFECHAINICIO", DbType:="DateTime")>  _
	Public Property DFECHAINICIO() As System.Nullable(Of Date)
		Get
			Return Me._DFECHAINICIO
		End Get
		Set
			If (Me._DFECHAINICIO.Equals(value) = false) Then
				Me.OnDFECHAINICIOChanging(value)
				Me.SendPropertyChanging
				Me._DFECHAINICIO = value
				Me.SendPropertyChanged("DFECHAINICIO")
				Me.OnDFECHAINICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECIOATENCION", DbType:="Decimal(18,2)")>  _
	Public Property PRECIOATENCION() As System.Nullable(Of Decimal)
		Get
			Return Me._PRECIOATENCION
		End Get
		Set
			If (Me._PRECIOATENCION.Equals(value) = false) Then
				Me.OnPRECIOATENCIONChanging(value)
				Me.SendPropertyChanging
				Me._PRECIOATENCION = value
				Me.SendPropertyChanged("PRECIOATENCION")
				Me.OnPRECIOATENCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TOTALPAGAR", DbType:="Decimal(18,2)")>  _
	Public Property TOTALPAGAR() As System.Nullable(Of Decimal)
		Get
			Return Me._TOTALPAGAR
		End Get
		Set
			If (Me._TOTALPAGAR.Equals(value) = false) Then
				Me.OnTOTALPAGARChanging(value)
				Me.SendPropertyChanging
				Me._TOTALPAGAR = value
				Me.SendPropertyChanged("TOTALPAGAR")
				Me.OnTOTALPAGARChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDSEDE", DbType:="Int")>  _
	Public Property IIDSEDE() As System.Nullable(Of Integer)
		Get
			Return Me._IIDSEDE
		End Get
		Set
			If (Me._IIDSEDE.Equals(value) = false) Then
				If Me._Sede.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDSEDEChanging(value)
				Me.SendPropertyChanging
				Me._IIDSEDE = value
				Me.SendPropertyChanged("IIDSEDE")
				Me.OnIIDSEDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDDOCTORASIGNACITAUSUARIO", DbType:="Int")>  _
	Public Property IIDDOCTORASIGNACITAUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDDOCTORASIGNACITAUSUARIO
		End Get
		Set
			If (Me._IIDDOCTORASIGNACITAUSUARIO.Equals(value) = false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDDOCTORASIGNACITAUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDDOCTORASIGNACITAUSUARIO = value
				Me.SendPropertyChanged("IIDDOCTORASIGNACITAUSUARIO")
				Me.OnIIDDOCTORASIGNACITAUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDESTADOCITA", DbType:="Int")>  _
	Public Property IIDESTADOCITA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDESTADOCITA
		End Get
		Set
			If (Me._IIDESTADOCITA.Equals(value) = false) Then
				If Me._EstadoCita.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDESTADOCITAChanging(value)
				Me.SendPropertyChanging
				Me._IIDESTADOCITA = value
				Me.SendPropertyChanged("IIDESTADOCITA")
				Me.OnIIDESTADOCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFECHACITA", DbType:="DateTime")>  _
	Public Property DFECHACITA() As System.Nullable(Of Date)
		Get
			Return Me._DFECHACITA
		End Get
		Set
			If (Me._DFECHACITA.Equals(value) = false) Then
				Me.OnDFECHACITAChanging(value)
				Me.SendPropertyChanging
				Me._DFECHACITA = value
				Me.SendPropertyChanged("DFECHACITA")
				Me.OnDFECHACITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cita_CitaMedicamento", Storage:="_CitaMedicamento", ThisKey:="IIDCITA", OtherKey:="IIDCITA")>  _
	Public Property CitaMedicamento() As EntitySet(Of CitaMedicamento)
		Get
			Return Me._CitaMedicamento
		End Get
		Set
			Me._CitaMedicamento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoCita_Cita", Storage:="_EstadoCita", ThisKey:="IIDESTADOCITA", OtherKey:="IIDESTADO", IsForeignKey:=true)>  _
	Public Property EstadoCita() As EstadoCita
		Get
			Return Me._EstadoCita.Entity
		End Get
		Set
			Dim previousValue As EstadoCita = Me._EstadoCita.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoCita.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoCita.Entity = Nothing
					previousValue.Cita.Remove(Me)
				End If
				Me._EstadoCita.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita.Add(Me)
					Me._IIDESTADOCITA = value.IIDESTADO
				Else
					Me._IIDESTADOCITA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EstadoCita")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mascota_Cita", Storage:="_Mascota", ThisKey:="IIDMASCOTA", OtherKey:="IIDMASCOTA", IsForeignKey:=true)>  _
	Public Property Mascota() As Mascota
		Get
			Return Me._Mascota.Entity
		End Get
		Set
			Dim previousValue As Mascota = Me._Mascota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Mascota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Mascota.Entity = Nothing
					previousValue.Cita.Remove(Me)
				End If
				Me._Mascota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita.Add(Me)
					Me._IIDMASCOTA = value.IIDMASCOTA
				Else
					Me._IIDMASCOTA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Mascota")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sede_Cita", Storage:="_Sede", ThisKey:="IIDSEDE", OtherKey:="IIDSEDE", IsForeignKey:=true)>  _
	Public Property Sede() As Sede
		Get
			Return Me._Sede.Entity
		End Get
		Set
			Dim previousValue As Sede = Me._Sede.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sede.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sede.Entity = Nothing
					previousValue.Cita.Remove(Me)
				End If
				Me._Sede.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita.Add(Me)
					Me._IIDSEDE = value.IIDSEDE
				Else
					Me._IIDSEDE = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sede")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoMascota_Cita", Storage:="_TipoMascota", ThisKey:="IIDTIPOMASCOTA", OtherKey:="IIDTIPOMASCOTA", IsForeignKey:=true)>  _
	Public Property TipoMascota() As TipoMascota
		Get
			Return Me._TipoMascota.Entity
		End Get
		Set
			Dim previousValue As TipoMascota = Me._TipoMascota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoMascota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoMascota.Entity = Nothing
					previousValue.Cita.Remove(Me)
				End If
				Me._TipoMascota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita.Add(Me)
					Me._IIDTIPOMASCOTA = value.IIDTIPOMASCOTA
				Else
					Me._IIDTIPOMASCOTA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoMascota")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cita", Storage:="_Usuario", ThisKey:="IIDDOCTORASIGNACITAUSUARIO", OtherKey:="IIDUSUARIO", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Cita.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita.Add(Me)
					Me._IIDDOCTORASIGNACITAUSUARIO = value.IIDUSUARIO
				Else
					Me._IIDDOCTORASIGNACITAUSUARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cita1", Storage:="_Usuario1", ThisKey:="IIDUSUARIO", OtherKey:="IIDUSUARIO", IsForeignKey:=true)>  _
	Public Property Usuario1() As Usuario
		Get
			Return Me._Usuario1.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario1.Entity = Nothing
					previousValue.Cita1.Remove(Me)
				End If
				Me._Usuario1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cita1.Add(Me)
					Me._IIDUSUARIO = value.IIDUSUARIO
				Else
					Me._IIDUSUARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CitaMedicamento(ByVal entity As CitaMedicamento)
		Me.SendPropertyChanging
		entity.Cita = Me
	End Sub
	
	Private Sub detach_CitaMedicamento(ByVal entity As CitaMedicamento)
		Me.SendPropertyChanging
		entity.Cita = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CitaMedicamento")>  _
Partial Public Class CitaMedicamento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDCITAMEDICAMENTO As Integer
	
	Private _IIDCITA As System.Nullable(Of Integer)
	
	Private _IIDMEDICAMENTO As System.Nullable(Of Integer)
	
	Private _PRECIO As System.Nullable(Of Decimal)
	
	Private _CANTIDAD As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Cita As EntityRef(Of Cita)
	
	Private _Medicamento As EntityRef(Of Medicamento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDCITAMEDICAMENTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDCITAMEDICAMENTOChanged()
    End Sub
    Partial Private Sub OnIIDCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDCITAChanged()
    End Sub
    Partial Private Sub OnIIDMEDICAMENTOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDMEDICAMENTOChanged()
    End Sub
    Partial Private Sub OnPRECIOChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPRECIOChanged()
    End Sub
    Partial Private Sub OnCANTIDADChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCANTIDADChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = CType(Nothing, EntityRef(Of Cita))
		Me._Medicamento = CType(Nothing, EntityRef(Of Medicamento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDCITAMEDICAMENTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDCITAMEDICAMENTO() As Integer
		Get
			Return Me._IIDCITAMEDICAMENTO
		End Get
		Set
			If ((Me._IIDCITAMEDICAMENTO = value)  _
						= false) Then
				Me.OnIIDCITAMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._IIDCITAMEDICAMENTO = value
				Me.SendPropertyChanged("IIDCITAMEDICAMENTO")
				Me.OnIIDCITAMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDCITA", DbType:="Int")>  _
	Public Property IIDCITA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDCITA
		End Get
		Set
			If (Me._IIDCITA.Equals(value) = false) Then
				If Me._Cita.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IIDCITA = value
				Me.SendPropertyChanged("IIDCITA")
				Me.OnIIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDMEDICAMENTO", DbType:="Int")>  _
	Public Property IIDMEDICAMENTO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDMEDICAMENTO
		End Get
		Set
			If (Me._IIDMEDICAMENTO.Equals(value) = false) Then
				If Me._Medicamento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._IIDMEDICAMENTO = value
				Me.SendPropertyChanged("IIDMEDICAMENTO")
				Me.OnIIDMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECIO", DbType:="Decimal(18,2)")>  _
	Public Property PRECIO() As System.Nullable(Of Decimal)
		Get
			Return Me._PRECIO
		End Get
		Set
			If (Me._PRECIO.Equals(value) = false) Then
				Me.OnPRECIOChanging(value)
				Me.SendPropertyChanging
				Me._PRECIO = value
				Me.SendPropertyChanged("PRECIO")
				Me.OnPRECIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CANTIDAD", DbType:="Int")>  _
	Public Property CANTIDAD() As System.Nullable(Of Integer)
		Get
			Return Me._CANTIDAD
		End Get
		Set
			If (Me._CANTIDAD.Equals(value) = false) Then
				Me.OnCANTIDADChanging(value)
				Me.SendPropertyChanging
				Me._CANTIDAD = value
				Me.SendPropertyChanged("CANTIDAD")
				Me.OnCANTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cita_CitaMedicamento", Storage:="_Cita", ThisKey:="IIDCITA", OtherKey:="IIDCITA", IsForeignKey:=true)>  _
	Public Property Cita() As Cita
		Get
			Return Me._Cita.Entity
		End Get
		Set
			Dim previousValue As Cita = Me._Cita.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cita.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cita.Entity = Nothing
					previousValue.CitaMedicamento.Remove(Me)
				End If
				Me._Cita.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CitaMedicamento.Add(Me)
					Me._IIDCITA = value.IIDCITA
				Else
					Me._IIDCITA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cita")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Medicamento_CitaMedicamento", Storage:="_Medicamento", ThisKey:="IIDMEDICAMENTO", OtherKey:="IIDMEDICAMENTO", IsForeignKey:=true)>  _
	Public Property Medicamento() As Medicamento
		Get
			Return Me._Medicamento.Entity
		End Get
		Set
			Dim previousValue As Medicamento = Me._Medicamento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Medicamento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Medicamento.Entity = Nothing
					previousValue.CitaMedicamento.Remove(Me)
				End If
				Me._Medicamento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CitaMedicamento.Add(Me)
					Me._IIDMEDICAMENTO = value.IIDMEDICAMENTO
				Else
					Me._IIDMEDICAMENTO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Medicamento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoCita")>  _
Partial Public Class EstadoCita
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDESTADO As Integer
	
	Private _VNOMBRE As String
	
	Private _VDESCRIPCION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Cita As EntitySet(Of Cita)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDESTADOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDESTADOChanged()
    End Sub
    Partial Private Sub OnVNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnVNOMBREChanged()
    End Sub
    Partial Private Sub OnVDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnVDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = New EntitySet(Of Cita)(AddressOf Me.attach_Cita, AddressOf Me.detach_Cita)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDESTADO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDESTADO() As Integer
		Get
			Return Me._IIDESTADO
		End Get
		Set
			If ((Me._IIDESTADO = value)  _
						= false) Then
				Me.OnIIDESTADOChanging(value)
				Me.SendPropertyChanging
				Me._IIDESTADO = value
				Me.SendPropertyChanged("IIDESTADO")
				Me.OnIIDESTADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VNOMBRE", DbType:="VarChar(150)")>  _
	Public Property VNOMBRE() As String
		Get
			Return Me._VNOMBRE
		End Get
		Set
			If (String.Equals(Me._VNOMBRE, value) = false) Then
				Me.OnVNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._VNOMBRE = value
				Me.SendPropertyChanged("VNOMBRE")
				Me.OnVNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VDESCRIPCION", DbType:="VarChar(150)")>  _
	Public Property VDESCRIPCION() As String
		Get
			Return Me._VDESCRIPCION
		End Get
		Set
			If (String.Equals(Me._VDESCRIPCION, value) = false) Then
				Me.OnVDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._VDESCRIPCION = value
				Me.SendPropertyChanged("VDESCRIPCION")
				Me.OnVDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoCita_Cita", Storage:="_Cita", ThisKey:="IIDESTADO", OtherKey:="IIDESTADOCITA")>  _
	Public Property Cita() As EntitySet(Of Cita)
		Get
			Return Me._Cita
		End Get
		Set
			Me._Cita.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.EstadoCita = Me
	End Sub
	
	Private Sub detach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.EstadoCita = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HistorialCita")>  _
Partial Public Class HistorialCita
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDHISTORIALCITA As Integer
	
	Private _IIDCITA As System.Nullable(Of Integer)
	
	Private _IIDESTADO As System.Nullable(Of Integer)
	
	Private _IIDUSUARIO As System.Nullable(Of Integer)
	
	Private _DFECHA As System.Nullable(Of Date)
	
	Private _VOBSERVACION As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDHISTORIALCITAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDHISTORIALCITAChanged()
    End Sub
    Partial Private Sub OnIIDCITAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDCITAChanged()
    End Sub
    Partial Private Sub OnIIDESTADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDESTADOChanged()
    End Sub
    Partial Private Sub OnIIDUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDUSUARIOChanged()
    End Sub
    Partial Private Sub OnDFECHAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDFECHAChanged()
    End Sub
    Partial Private Sub OnVOBSERVACIONChanging(value As String)
    End Sub
    Partial Private Sub OnVOBSERVACIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDHISTORIALCITA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDHISTORIALCITA() As Integer
		Get
			Return Me._IIDHISTORIALCITA
		End Get
		Set
			If ((Me._IIDHISTORIALCITA = value)  _
						= false) Then
				Me.OnIIDHISTORIALCITAChanging(value)
				Me.SendPropertyChanging
				Me._IIDHISTORIALCITA = value
				Me.SendPropertyChanged("IIDHISTORIALCITA")
				Me.OnIIDHISTORIALCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDCITA", DbType:="Int")>  _
	Public Property IIDCITA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDCITA
		End Get
		Set
			If (Me._IIDCITA.Equals(value) = false) Then
				Me.OnIIDCITAChanging(value)
				Me.SendPropertyChanging
				Me._IIDCITA = value
				Me.SendPropertyChanged("IIDCITA")
				Me.OnIIDCITAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDESTADO", DbType:="Int")>  _
	Public Property IIDESTADO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDESTADO
		End Get
		Set
			If (Me._IIDESTADO.Equals(value) = false) Then
				Me.OnIIDESTADOChanging(value)
				Me.SendPropertyChanging
				Me._IIDESTADO = value
				Me.SendPropertyChanged("IIDESTADO")
				Me.OnIIDESTADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDUSUARIO", DbType:="Int")>  _
	Public Property IIDUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDUSUARIO
		End Get
		Set
			If (Me._IIDUSUARIO.Equals(value) = false) Then
				Me.OnIIDUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDUSUARIO = value
				Me.SendPropertyChanged("IIDUSUARIO")
				Me.OnIIDUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFECHA", DbType:="DateTime")>  _
	Public Property DFECHA() As System.Nullable(Of Date)
		Get
			Return Me._DFECHA
		End Get
		Set
			If (Me._DFECHA.Equals(value) = false) Then
				Me.OnDFECHAChanging(value)
				Me.SendPropertyChanging
				Me._DFECHA = value
				Me.SendPropertyChanged("DFECHA")
				Me.OnDFECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOBSERVACION", DbType:="VarChar(50)")>  _
	Public Property VOBSERVACION() As String
		Get
			Return Me._VOBSERVACION
		End Get
		Set
			If (String.Equals(Me._VOBSERVACION, value) = false) Then
				Me.OnVOBSERVACIONChanging(value)
				Me.SendPropertyChanging
				Me._VOBSERVACION = value
				Me.SendPropertyChanged("VOBSERVACION")
				Me.OnVOBSERVACIONChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mascota")>  _
Partial Public Class Mascota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDMASCOTA As Integer
	
	Private _IIDUSUARIOPROPIETARIO As System.Nullable(Of Integer)
	
	Private _NOMBRE As String
	
	Private _IIDTIPOMASCOTA As System.Nullable(Of Integer)
	
	Private _FECHANACIMIENTO As Date
	
	Private _ANCHO As String
	
	Private _ALTURA As String
	
	Private _IIDSEXO As System.Nullable(Of Integer)
	
	Private _VOBSERVACION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Cita As EntitySet(Of Cita)
	
	Private _UsuarioMascota As EntitySet(Of UsuarioMascota)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _TipoMascota As EntityRef(Of TipoMascota)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDMASCOTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDMASCOTAChanged()
    End Sub
    Partial Private Sub OnIIDUSUARIOPROPIETARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDUSUARIOPROPIETARIOChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanged()
    End Sub
    Partial Private Sub OnFECHANACIMIENTOChanging(value As Date)
    End Sub
    Partial Private Sub OnFECHANACIMIENTOChanged()
    End Sub
    Partial Private Sub OnANCHOChanging(value As String)
    End Sub
    Partial Private Sub OnANCHOChanged()
    End Sub
    Partial Private Sub OnALTURAChanging(value As String)
    End Sub
    Partial Private Sub OnALTURAChanged()
    End Sub
    Partial Private Sub OnIIDSEXOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDSEXOChanged()
    End Sub
    Partial Private Sub OnVOBSERVACIONChanging(value As String)
    End Sub
    Partial Private Sub OnVOBSERVACIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = New EntitySet(Of Cita)(AddressOf Me.attach_Cita, AddressOf Me.detach_Cita)
		Me._UsuarioMascota = New EntitySet(Of UsuarioMascota)(AddressOf Me.attach_UsuarioMascota, AddressOf Me.detach_UsuarioMascota)
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._TipoMascota = CType(Nothing, EntityRef(Of TipoMascota))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDMASCOTA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDMASCOTA() As Integer
		Get
			Return Me._IIDMASCOTA
		End Get
		Set
			If ((Me._IIDMASCOTA = value)  _
						= false) Then
				Me.OnIIDMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDMASCOTA = value
				Me.SendPropertyChanged("IIDMASCOTA")
				Me.OnIIDMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDUSUARIOPROPIETARIO", DbType:="Int")>  _
	Public Property IIDUSUARIOPROPIETARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDUSUARIOPROPIETARIO
		End Get
		Set
			If (Me._IIDUSUARIOPROPIETARIO.Equals(value) = false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDUSUARIOPROPIETARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDUSUARIOPROPIETARIO = value
				Me.SendPropertyChanged("IIDUSUARIOPROPIETARIO")
				Me.OnIIDUSUARIOPROPIETARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(150)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOMASCOTA", DbType:="Int")>  _
	Public Property IIDTIPOMASCOTA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDTIPOMASCOTA
		End Get
		Set
			If (Me._IIDTIPOMASCOTA.Equals(value) = false) Then
				If Me._TipoMascota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDTIPOMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOMASCOTA = value
				Me.SendPropertyChanged("IIDTIPOMASCOTA")
				Me.OnIIDTIPOMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHANACIMIENTO", DbType:="DateTime NOT NULL")>  _
	Public Property FECHANACIMIENTO() As Date
		Get
			Return Me._FECHANACIMIENTO
		End Get
		Set
			If ((Me._FECHANACIMIENTO = value)  _
						= false) Then
				Me.OnFECHANACIMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._FECHANACIMIENTO = value
				Me.SendPropertyChanged("FECHANACIMIENTO")
				Me.OnFECHANACIMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ANCHO", DbType:="VarChar(10)")>  _
	Public Property ANCHO() As String
		Get
			Return Me._ANCHO
		End Get
		Set
			If (String.Equals(Me._ANCHO, value) = false) Then
				Me.OnANCHOChanging(value)
				Me.SendPropertyChanging
				Me._ANCHO = value
				Me.SendPropertyChanged("ANCHO")
				Me.OnANCHOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ALTURA", DbType:="VarChar(10)")>  _
	Public Property ALTURA() As String
		Get
			Return Me._ALTURA
		End Get
		Set
			If (String.Equals(Me._ALTURA, value) = false) Then
				Me.OnALTURAChanging(value)
				Me.SendPropertyChanging
				Me._ALTURA = value
				Me.SendPropertyChanged("ALTURA")
				Me.OnALTURAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDSEXO", DbType:="Int")>  _
	Public Property IIDSEXO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDSEXO
		End Get
		Set
			If (Me._IIDSEXO.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDSEXOChanging(value)
				Me.SendPropertyChanging
				Me._IIDSEXO = value
				Me.SendPropertyChanged("IIDSEXO")
				Me.OnIIDSEXOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VOBSERVACION", DbType:="VarChar(500)")>  _
	Public Property VOBSERVACION() As String
		Get
			Return Me._VOBSERVACION
		End Get
		Set
			If (String.Equals(Me._VOBSERVACION, value) = false) Then
				Me.OnVOBSERVACIONChanging(value)
				Me.SendPropertyChanging
				Me._VOBSERVACION = value
				Me.SendPropertyChanged("VOBSERVACION")
				Me.OnVOBSERVACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mascota_Cita", Storage:="_Cita", ThisKey:="IIDMASCOTA", OtherKey:="IIDMASCOTA")>  _
	Public Property Cita() As EntitySet(Of Cita)
		Get
			Return Me._Cita
		End Get
		Set
			Me._Cita.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mascota_UsuarioMascota", Storage:="_UsuarioMascota", ThisKey:="IIDMASCOTA", OtherKey:="IIDMASCOTA")>  _
	Public Property UsuarioMascota() As EntitySet(Of UsuarioMascota)
		Get
			Return Me._UsuarioMascota
		End Get
		Set
			Me._UsuarioMascota.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Mascota", Storage:="_Sexo", ThisKey:="IIDSEXO", OtherKey:="IIDSEXO", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Mascota.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mascota.Add(Me)
					Me._IIDSEXO = value.IIDSEXO
				Else
					Me._IIDSEXO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoMascota_Mascota", Storage:="_TipoMascota", ThisKey:="IIDTIPOMASCOTA", OtherKey:="IIDTIPOMASCOTA", IsForeignKey:=true)>  _
	Public Property TipoMascota() As TipoMascota
		Get
			Return Me._TipoMascota.Entity
		End Get
		Set
			Dim previousValue As TipoMascota = Me._TipoMascota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoMascota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoMascota.Entity = Nothing
					previousValue.Mascota.Remove(Me)
				End If
				Me._TipoMascota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mascota.Add(Me)
					Me._IIDTIPOMASCOTA = value.IIDTIPOMASCOTA
				Else
					Me._IIDTIPOMASCOTA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoMascota")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Mascota", Storage:="_Usuario", ThisKey:="IIDUSUARIOPROPIETARIO", OtherKey:="IIDUSUARIO", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Mascota.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mascota.Add(Me)
					Me._IIDUSUARIOPROPIETARIO = value.IIDUSUARIO
				Else
					Me._IIDUSUARIOPROPIETARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Mascota = Me
	End Sub
	
	Private Sub detach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Mascota = Nothing
	End Sub
	
	Private Sub attach_UsuarioMascota(ByVal entity As UsuarioMascota)
		Me.SendPropertyChanging
		entity.Mascota = Me
	End Sub
	
	Private Sub detach_UsuarioMascota(ByVal entity As UsuarioMascota)
		Me.SendPropertyChanging
		entity.Mascota = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Medicamento")>  _
Partial Public Class Medicamento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NOMBRE As String
	
	Private _CONCENTRACION As String
	
	Private _PRECIO As System.Nullable(Of Decimal)
	
	Private _STOCK As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _IIDMEDICAMENTO As Integer
	
	Private _CitaMedicamento As EntitySet(Of CitaMedicamento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnCONCENTRACIONChanging(value As String)
    End Sub
    Partial Private Sub OnCONCENTRACIONChanged()
    End Sub
    Partial Private Sub OnPRECIOChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPRECIOChanged()
    End Sub
    Partial Private Sub OnSTOCKChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSTOCKChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnIIDMEDICAMENTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDMEDICAMENTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CitaMedicamento = New EntitySet(Of CitaMedicamento)(AddressOf Me.attach_CitaMedicamento, AddressOf Me.detach_CitaMedicamento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(50)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONCENTRACION", DbType:="VarChar(100)")>  _
	Public Property CONCENTRACION() As String
		Get
			Return Me._CONCENTRACION
		End Get
		Set
			If (String.Equals(Me._CONCENTRACION, value) = false) Then
				Me.OnCONCENTRACIONChanging(value)
				Me.SendPropertyChanging
				Me._CONCENTRACION = value
				Me.SendPropertyChanged("CONCENTRACION")
				Me.OnCONCENTRACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRECIO", DbType:="Decimal(18,2)")>  _
	Public Property PRECIO() As System.Nullable(Of Decimal)
		Get
			Return Me._PRECIO
		End Get
		Set
			If (Me._PRECIO.Equals(value) = false) Then
				Me.OnPRECIOChanging(value)
				Me.SendPropertyChanging
				Me._PRECIO = value
				Me.SendPropertyChanged("PRECIO")
				Me.OnPRECIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STOCK", DbType:="Int")>  _
	Public Property STOCK() As System.Nullable(Of Integer)
		Get
			Return Me._STOCK
		End Get
		Set
			If (Me._STOCK.Equals(value) = false) Then
				Me.OnSTOCKChanging(value)
				Me.SendPropertyChanging
				Me._STOCK = value
				Me.SendPropertyChanged("STOCK")
				Me.OnSTOCKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDMEDICAMENTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDMEDICAMENTO() As Integer
		Get
			Return Me._IIDMEDICAMENTO
		End Get
		Set
			If ((Me._IIDMEDICAMENTO = value)  _
						= false) Then
				Me.OnIIDMEDICAMENTOChanging(value)
				Me.SendPropertyChanging
				Me._IIDMEDICAMENTO = value
				Me.SendPropertyChanged("IIDMEDICAMENTO")
				Me.OnIIDMEDICAMENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Medicamento_CitaMedicamento", Storage:="_CitaMedicamento", ThisKey:="IIDMEDICAMENTO", OtherKey:="IIDMEDICAMENTO")>  _
	Public Property CitaMedicamento() As EntitySet(Of CitaMedicamento)
		Get
			Return Me._CitaMedicamento
		End Get
		Set
			Me._CitaMedicamento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CitaMedicamento(ByVal entity As CitaMedicamento)
		Me.SendPropertyChanging
		entity.Medicamento = Me
	End Sub
	
	Private Sub detach_CitaMedicamento(ByVal entity As CitaMedicamento)
		Me.SendPropertyChanging
		entity.Medicamento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pagina")>  _
Partial Public Class Pagina
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDPAGINA As Integer
	
	Private _MENSAJE As String
	
	Private _ACCION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _CONTROLADOR As String
	
	Private _PaginaTipoUsuario As EntitySet(Of PaginaTipoUsuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDPAGINAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDPAGINAChanged()
    End Sub
    Partial Private Sub OnMENSAJEChanging(value As String)
    End Sub
    Partial Private Sub OnMENSAJEChanged()
    End Sub
    Partial Private Sub OnACCIONChanging(value As String)
    End Sub
    Partial Private Sub OnACCIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnCONTROLADORChanging(value As String)
    End Sub
    Partial Private Sub OnCONTROLADORChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaginaTipoUsuario = New EntitySet(Of PaginaTipoUsuario)(AddressOf Me.attach_PaginaTipoUsuario, AddressOf Me.detach_PaginaTipoUsuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPAGINA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDPAGINA() As Integer
		Get
			Return Me._IIDPAGINA
		End Get
		Set
			If ((Me._IIDPAGINA = value)  _
						= false) Then
				Me.OnIIDPAGINAChanging(value)
				Me.SendPropertyChanging
				Me._IIDPAGINA = value
				Me.SendPropertyChanged("IIDPAGINA")
				Me.OnIIDPAGINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MENSAJE", DbType:="VarChar(100)")>  _
	Public Property MENSAJE() As String
		Get
			Return Me._MENSAJE
		End Get
		Set
			If (String.Equals(Me._MENSAJE, value) = false) Then
				Me.OnMENSAJEChanging(value)
				Me.SendPropertyChanging
				Me._MENSAJE = value
				Me.SendPropertyChanged("MENSAJE")
				Me.OnMENSAJEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACCION", DbType:="VarChar(100)")>  _
	Public Property ACCION() As String
		Get
			Return Me._ACCION
		End Get
		Set
			If (String.Equals(Me._ACCION, value) = false) Then
				Me.OnACCIONChanging(value)
				Me.SendPropertyChanging
				Me._ACCION = value
				Me.SendPropertyChanged("ACCION")
				Me.OnACCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTROLADOR", DbType:="VarChar(100)")>  _
	Public Property CONTROLADOR() As String
		Get
			Return Me._CONTROLADOR
		End Get
		Set
			If (String.Equals(Me._CONTROLADOR, value) = false) Then
				Me.OnCONTROLADORChanging(value)
				Me.SendPropertyChanging
				Me._CONTROLADOR = value
				Me.SendPropertyChanged("CONTROLADOR")
				Me.OnCONTROLADORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pagina_PaginaTipoUsuario", Storage:="_PaginaTipoUsuario", ThisKey:="IIDPAGINA", OtherKey:="IIDPAGINA")>  _
	Public Property PaginaTipoUsuario() As EntitySet(Of PaginaTipoUsuario)
		Get
			Return Me._PaginaTipoUsuario
		End Get
		Set
			Me._PaginaTipoUsuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PaginaTipoUsuario(ByVal entity As PaginaTipoUsuario)
		Me.SendPropertyChanging
		entity.Pagina = Me
	End Sub
	
	Private Sub detach_PaginaTipoUsuario(ByVal entity As PaginaTipoUsuario)
		Me.SendPropertyChanging
		entity.Pagina = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaginaTipoUsuario")>  _
Partial Public Class PaginaTipoUsuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDPAGINATIPOUSUARIO As Integer
	
	Private _IIDPAGINA As System.Nullable(Of Integer)
	
	Private _IIDTIPOUSUARIO As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _IIDVISTA As System.Nullable(Of Integer)
	
	Private _Pagina As EntityRef(Of Pagina)
	
	Private _TipoUsuario As EntityRef(Of TipoUsuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDPAGINATIPOUSUARIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDPAGINATIPOUSUARIOChanged()
    End Sub
    Partial Private Sub OnIIDPAGINAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDPAGINAChanged()
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnIIDVISTAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDVISTAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Pagina = CType(Nothing, EntityRef(Of Pagina))
		Me._TipoUsuario = CType(Nothing, EntityRef(Of TipoUsuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPAGINATIPOUSUARIO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDPAGINATIPOUSUARIO() As Integer
		Get
			Return Me._IIDPAGINATIPOUSUARIO
		End Get
		Set
			If ((Me._IIDPAGINATIPOUSUARIO = value)  _
						= false) Then
				Me.OnIIDPAGINATIPOUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDPAGINATIPOUSUARIO = value
				Me.SendPropertyChanged("IIDPAGINATIPOUSUARIO")
				Me.OnIIDPAGINATIPOUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPAGINA", DbType:="Int")>  _
	Public Property IIDPAGINA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDPAGINA
		End Get
		Set
			If (Me._IIDPAGINA.Equals(value) = false) Then
				If Me._Pagina.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDPAGINAChanging(value)
				Me.SendPropertyChanging
				Me._IIDPAGINA = value
				Me.SendPropertyChanged("IIDPAGINA")
				Me.OnIIDPAGINAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOUSUARIO", DbType:="Int")>  _
	Public Property IIDTIPOUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDTIPOUSUARIO
		End Get
		Set
			If (Me._IIDTIPOUSUARIO.Equals(value) = false) Then
				If Me._TipoUsuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDTIPOUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOUSUARIO = value
				Me.SendPropertyChanged("IIDTIPOUSUARIO")
				Me.OnIIDTIPOUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDVISTA", DbType:="Int")>  _
	Public Property IIDVISTA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDVISTA
		End Get
		Set
			If (Me._IIDVISTA.Equals(value) = false) Then
				Me.OnIIDVISTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDVISTA = value
				Me.SendPropertyChanged("IIDVISTA")
				Me.OnIIDVISTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pagina_PaginaTipoUsuario", Storage:="_Pagina", ThisKey:="IIDPAGINA", OtherKey:="IIDPAGINA", IsForeignKey:=true)>  _
	Public Property Pagina() As Pagina
		Get
			Return Me._Pagina.Entity
		End Get
		Set
			Dim previousValue As Pagina = Me._Pagina.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pagina.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pagina.Entity = Nothing
					previousValue.PaginaTipoUsuario.Remove(Me)
				End If
				Me._Pagina.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PaginaTipoUsuario.Add(Me)
					Me._IIDPAGINA = value.IIDPAGINA
				Else
					Me._IIDPAGINA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Pagina")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoUsuario_PaginaTipoUsuario", Storage:="_TipoUsuario", ThisKey:="IIDTIPOUSUARIO", OtherKey:="IIDTIPOUSUARIO", IsForeignKey:=true)>  _
	Public Property TipoUsuario() As TipoUsuario
		Get
			Return Me._TipoUsuario.Entity
		End Get
		Set
			Dim previousValue As TipoUsuario = Me._TipoUsuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoUsuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoUsuario.Entity = Nothing
					previousValue.PaginaTipoUsuario.Remove(Me)
				End If
				Me._TipoUsuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PaginaTipoUsuario.Add(Me)
					Me._IIDTIPOUSUARIO = value.IIDTIPOUSUARIO
				Else
					Me._IIDTIPOUSUARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoUsuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Persona")>  _
Partial Public Class Persona
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDPERSONA As Integer
	
	Private _NOMBRE As String
	
	Private _APPATERNO As String
	
	Private _APMATERNO As String
	
	Private _TELEFONO As String
	
	Private _CORREO As String
	
	Private _FECHANACIMIENTO As System.Nullable(Of Date)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _BTIENEUSUARIO As System.Nullable(Of Integer)
	
	Private _IIDSEXO As System.Nullable(Of Integer)
	
	Private _Usuario As EntitySet(Of Usuario)
	
	Private _Sexo As EntityRef(Of Sexo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDPERSONAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDPERSONAChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnAPPATERNOChanging(value As String)
    End Sub
    Partial Private Sub OnAPPATERNOChanged()
    End Sub
    Partial Private Sub OnAPMATERNOChanging(value As String)
    End Sub
    Partial Private Sub OnAPMATERNOChanged()
    End Sub
    Partial Private Sub OnTELEFONOChanging(value As String)
    End Sub
    Partial Private Sub OnTELEFONOChanged()
    End Sub
    Partial Private Sub OnCORREOChanging(value As String)
    End Sub
    Partial Private Sub OnCORREOChanged()
    End Sub
    Partial Private Sub OnFECHANACIMIENTOChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFECHANACIMIENTOChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnBTIENEUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBTIENEUSUARIOChanged()
    End Sub
    Partial Private Sub OnIIDSEXOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDSEXOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuario, AddressOf Me.detach_Usuario)
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPERSONA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDPERSONA() As Integer
		Get
			Return Me._IIDPERSONA
		End Get
		Set
			If ((Me._IIDPERSONA = value)  _
						= false) Then
				Me.OnIIDPERSONAChanging(value)
				Me.SendPropertyChanging
				Me._IIDPERSONA = value
				Me.SendPropertyChanged("IIDPERSONA")
				Me.OnIIDPERSONAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(100)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APPATERNO", DbType:="VarChar(150)")>  _
	Public Property APPATERNO() As String
		Get
			Return Me._APPATERNO
		End Get
		Set
			If (String.Equals(Me._APPATERNO, value) = false) Then
				Me.OnAPPATERNOChanging(value)
				Me.SendPropertyChanging
				Me._APPATERNO = value
				Me.SendPropertyChanged("APPATERNO")
				Me.OnAPPATERNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APMATERNO", DbType:="VarChar(150)")>  _
	Public Property APMATERNO() As String
		Get
			Return Me._APMATERNO
		End Get
		Set
			If (String.Equals(Me._APMATERNO, value) = false) Then
				Me.OnAPMATERNOChanging(value)
				Me.SendPropertyChanging
				Me._APMATERNO = value
				Me.SendPropertyChanged("APMATERNO")
				Me.OnAPMATERNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEFONO", DbType:="VarChar(50)")>  _
	Public Property TELEFONO() As String
		Get
			Return Me._TELEFONO
		End Get
		Set
			If (String.Equals(Me._TELEFONO, value) = false) Then
				Me.OnTELEFONOChanging(value)
				Me.SendPropertyChanging
				Me._TELEFONO = value
				Me.SendPropertyChanged("TELEFONO")
				Me.OnTELEFONOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CORREO", DbType:="VarChar(100)")>  _
	Public Property CORREO() As String
		Get
			Return Me._CORREO
		End Get
		Set
			If (String.Equals(Me._CORREO, value) = false) Then
				Me.OnCORREOChanging(value)
				Me.SendPropertyChanging
				Me._CORREO = value
				Me.SendPropertyChanged("CORREO")
				Me.OnCORREOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHANACIMIENTO", DbType:="DateTime")>  _
	Public Property FECHANACIMIENTO() As System.Nullable(Of Date)
		Get
			Return Me._FECHANACIMIENTO
		End Get
		Set
			If (Me._FECHANACIMIENTO.Equals(value) = false) Then
				Me.OnFECHANACIMIENTOChanging(value)
				Me.SendPropertyChanging
				Me._FECHANACIMIENTO = value
				Me.SendPropertyChanged("FECHANACIMIENTO")
				Me.OnFECHANACIMIENTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BTIENEUSUARIO", DbType:="Int")>  _
	Public Property BTIENEUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._BTIENEUSUARIO
		End Get
		Set
			If (Me._BTIENEUSUARIO.Equals(value) = false) Then
				Me.OnBTIENEUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._BTIENEUSUARIO = value
				Me.SendPropertyChanged("BTIENEUSUARIO")
				Me.OnBTIENEUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDSEXO", DbType:="Int")>  _
	Public Property IIDSEXO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDSEXO
		End Get
		Set
			If (Me._IIDSEXO.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDSEXOChanging(value)
				Me.SendPropertyChanging
				Me._IIDSEXO = value
				Me.SendPropertyChanged("IIDSEXO")
				Me.OnIIDSEXOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Persona_Usuario", Storage:="_Usuario", ThisKey:="IIDPERSONA", OtherKey:="IIDPERSONA")>  _
	Public Property Usuario() As EntitySet(Of Usuario)
		Get
			Return Me._Usuario
		End Get
		Set
			Me._Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Persona", Storage:="_Sexo", ThisKey:="IIDSEXO", OtherKey:="IIDSEXO", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Persona.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Persona.Add(Me)
					Me._IIDSEXO = value.IIDSEXO
				Else
					Me._IIDSEXO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Persona = Me
	End Sub
	
	Private Sub detach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Persona = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sede")>  _
Partial Public Class Sede
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDSEDE As Integer
	
	Private _VNOMBRE As String
	
	Private _VDIRECCION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Cita As EntitySet(Of Cita)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDSEDEChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDSEDEChanged()
    End Sub
    Partial Private Sub OnVNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnVNOMBREChanged()
    End Sub
    Partial Private Sub OnVDIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnVDIRECCIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = New EntitySet(Of Cita)(AddressOf Me.attach_Cita, AddressOf Me.detach_Cita)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDSEDE", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDSEDE() As Integer
		Get
			Return Me._IIDSEDE
		End Get
		Set
			If ((Me._IIDSEDE = value)  _
						= false) Then
				Me.OnIIDSEDEChanging(value)
				Me.SendPropertyChanging
				Me._IIDSEDE = value
				Me.SendPropertyChanged("IIDSEDE")
				Me.OnIIDSEDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VNOMBRE", DbType:="VarChar(200)")>  _
	Public Property VNOMBRE() As String
		Get
			Return Me._VNOMBRE
		End Get
		Set
			If (String.Equals(Me._VNOMBRE, value) = false) Then
				Me.OnVNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._VNOMBRE = value
				Me.SendPropertyChanged("VNOMBRE")
				Me.OnVNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VDIRECCION", DbType:="VarChar(300)")>  _
	Public Property VDIRECCION() As String
		Get
			Return Me._VDIRECCION
		End Get
		Set
			If (String.Equals(Me._VDIRECCION, value) = false) Then
				Me.OnVDIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._VDIRECCION = value
				Me.SendPropertyChanged("VDIRECCION")
				Me.OnVDIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sede_Cita", Storage:="_Cita", ThisKey:="IIDSEDE", OtherKey:="IIDSEDE")>  _
	Public Property Cita() As EntitySet(Of Cita)
		Get
			Return Me._Cita
		End Get
		Set
			Me._Cita.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Sede = Me
	End Sub
	
	Private Sub detach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Sede = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sexo")>  _
Partial Public Class Sexo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDSEXO As Integer
	
	Private _NOMBRE As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Mascota As EntitySet(Of Mascota)
	
	Private _Persona As EntitySet(Of Persona)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDSEXOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDSEXOChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mascota = New EntitySet(Of Mascota)(AddressOf Me.attach_Mascota, AddressOf Me.detach_Mascota)
		Me._Persona = New EntitySet(Of Persona)(AddressOf Me.attach_Persona, AddressOf Me.detach_Persona)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDSEXO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDSEXO() As Integer
		Get
			Return Me._IIDSEXO
		End Get
		Set
			If ((Me._IIDSEXO = value)  _
						= false) Then
				Me.OnIIDSEXOChanging(value)
				Me.SendPropertyChanging
				Me._IIDSEXO = value
				Me.SendPropertyChanged("IIDSEXO")
				Me.OnIIDSEXOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(100)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Mascota", Storage:="_Mascota", ThisKey:="IIDSEXO", OtherKey:="IIDSEXO")>  _
	Public Property Mascota() As EntitySet(Of Mascota)
		Get
			Return Me._Mascota
		End Get
		Set
			Me._Mascota.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Persona", Storage:="_Persona", ThisKey:="IIDSEXO", OtherKey:="IIDSEXO")>  _
	Public Property Persona() As EntitySet(Of Persona)
		Get
			Return Me._Persona
		End Get
		Set
			Me._Persona.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Persona(ByVal entity As Persona)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Persona(ByVal entity As Persona)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoMascota")>  _
Partial Public Class TipoMascota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDTIPOMASCOTA As Integer
	
	Private _NOMBRE As String
	
	Private _DESCRIPCION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Cita As EntitySet(Of Cita)
	
	Private _Mascota As EntitySet(Of Mascota)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDTIPOMASCOTAChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = New EntitySet(Of Cita)(AddressOf Me.attach_Cita, AddressOf Me.detach_Cita)
		Me._Mascota = New EntitySet(Of Mascota)(AddressOf Me.attach_Mascota, AddressOf Me.detach_Mascota)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOMASCOTA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDTIPOMASCOTA() As Integer
		Get
			Return Me._IIDTIPOMASCOTA
		End Get
		Set
			If ((Me._IIDTIPOMASCOTA = value)  _
						= false) Then
				Me.OnIIDTIPOMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOMASCOTA = value
				Me.SendPropertyChanged("IIDTIPOMASCOTA")
				Me.OnIIDTIPOMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(150)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(500)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoMascota_Cita", Storage:="_Cita", ThisKey:="IIDTIPOMASCOTA", OtherKey:="IIDTIPOMASCOTA")>  _
	Public Property Cita() As EntitySet(Of Cita)
		Get
			Return Me._Cita
		End Get
		Set
			Me._Cita.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoMascota_Mascota", Storage:="_Mascota", ThisKey:="IIDTIPOMASCOTA", OtherKey:="IIDTIPOMASCOTA")>  _
	Public Property Mascota() As EntitySet(Of Mascota)
		Get
			Return Me._Mascota
		End Get
		Set
			Me._Mascota.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.TipoMascota = Me
	End Sub
	
	Private Sub detach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.TipoMascota = Nothing
	End Sub
	
	Private Sub attach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.TipoMascota = Me
	End Sub
	
	Private Sub detach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.TipoMascota = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoUsuario")>  _
Partial Public Class TipoUsuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDTIPOUSUARIO As Integer
	
	Private _NOMBRE As String
	
	Private _DESCRIPCION As String
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _PaginaTipoUsuario As EntitySet(Of PaginaTipoUsuario)
	
	Private _Usuario As EntitySet(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanged()
    End Sub
    Partial Private Sub OnNOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREChanged()
    End Sub
    Partial Private Sub OnDESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaginaTipoUsuario = New EntitySet(Of PaginaTipoUsuario)(AddressOf Me.attach_PaginaTipoUsuario, AddressOf Me.detach_PaginaTipoUsuario)
		Me._Usuario = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuario, AddressOf Me.detach_Usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOUSUARIO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDTIPOUSUARIO() As Integer
		Get
			Return Me._IIDTIPOUSUARIO
		End Get
		Set
			If ((Me._IIDTIPOUSUARIO = value)  _
						= false) Then
				Me.OnIIDTIPOUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOUSUARIO = value
				Me.SendPropertyChanged("IIDTIPOUSUARIO")
				Me.OnIIDTIPOUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE", DbType:="VarChar(100)")>  _
	Public Property NOMBRE() As String
		Get
			Return Me._NOMBRE
		End Get
		Set
			If (String.Equals(Me._NOMBRE, value) = false) Then
				Me.OnNOMBREChanging(value)
				Me.SendPropertyChanging
				Me._NOMBRE = value
				Me.SendPropertyChanged("NOMBRE")
				Me.OnNOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPCION", DbType:="VarChar(100)")>  _
	Public Property DESCRIPCION() As String
		Get
			Return Me._DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._DESCRIPCION, value) = false) Then
				Me.OnDESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPCION = value
				Me.SendPropertyChanged("DESCRIPCION")
				Me.OnDESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoUsuario_PaginaTipoUsuario", Storage:="_PaginaTipoUsuario", ThisKey:="IIDTIPOUSUARIO", OtherKey:="IIDTIPOUSUARIO")>  _
	Public Property PaginaTipoUsuario() As EntitySet(Of PaginaTipoUsuario)
		Get
			Return Me._PaginaTipoUsuario
		End Get
		Set
			Me._PaginaTipoUsuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoUsuario_Usuario", Storage:="_Usuario", ThisKey:="IIDTIPOUSUARIO", OtherKey:="IIDTIPOUSUARIO")>  _
	Public Property Usuario() As EntitySet(Of Usuario)
		Get
			Return Me._Usuario
		End Get
		Set
			Me._Usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PaginaTipoUsuario(ByVal entity As PaginaTipoUsuario)
		Me.SendPropertyChanging
		entity.TipoUsuario = Me
	End Sub
	
	Private Sub detach_PaginaTipoUsuario(ByVal entity As PaginaTipoUsuario)
		Me.SendPropertyChanging
		entity.TipoUsuario = Nothing
	End Sub
	
	Private Sub attach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.TipoUsuario = Me
	End Sub
	
	Private Sub detach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.TipoUsuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDUSUARIO As Integer
	
	Private _NOMBREUSUARIO As String
	
	Private _CONTRA As String
	
	Private _IIDPERSONA As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _IIDTIPOUSUARIO As System.Nullable(Of Integer)
	
	Private _Cita As EntitySet(Of Cita)
	
	Private _Cita1 As EntitySet(Of Cita)
	
	Private _Mascota As EntitySet(Of Mascota)
	
	Private _UsuarioMascota As EntitySet(Of UsuarioMascota)
	
	Private _TipoUsuario As EntityRef(Of TipoUsuario)
	
	Private _Persona As EntityRef(Of Persona)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDUSUARIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDUSUARIOChanged()
    End Sub
    Partial Private Sub OnNOMBREUSUARIOChanging(value As String)
    End Sub
    Partial Private Sub OnNOMBREUSUARIOChanged()
    End Sub
    Partial Private Sub OnCONTRAChanging(value As String)
    End Sub
    Partial Private Sub OnCONTRAChanged()
    End Sub
    Partial Private Sub OnIIDPERSONAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDPERSONAChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDTIPOUSUARIOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cita = New EntitySet(Of Cita)(AddressOf Me.attach_Cita, AddressOf Me.detach_Cita)
		Me._Cita1 = New EntitySet(Of Cita)(AddressOf Me.attach_Cita1, AddressOf Me.detach_Cita1)
		Me._Mascota = New EntitySet(Of Mascota)(AddressOf Me.attach_Mascota, AddressOf Me.detach_Mascota)
		Me._UsuarioMascota = New EntitySet(Of UsuarioMascota)(AddressOf Me.attach_UsuarioMascota, AddressOf Me.detach_UsuarioMascota)
		Me._TipoUsuario = CType(Nothing, EntityRef(Of TipoUsuario))
		Me._Persona = CType(Nothing, EntityRef(Of Persona))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDUSUARIO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDUSUARIO() As Integer
		Get
			Return Me._IIDUSUARIO
		End Get
		Set
			If ((Me._IIDUSUARIO = value)  _
						= false) Then
				Me.OnIIDUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDUSUARIO = value
				Me.SendPropertyChanged("IIDUSUARIO")
				Me.OnIIDUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBREUSUARIO", DbType:="VarChar(100)")>  _
	Public Property NOMBREUSUARIO() As String
		Get
			Return Me._NOMBREUSUARIO
		End Get
		Set
			If (String.Equals(Me._NOMBREUSUARIO, value) = false) Then
				Me.OnNOMBREUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._NOMBREUSUARIO = value
				Me.SendPropertyChanged("NOMBREUSUARIO")
				Me.OnNOMBREUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONTRA", DbType:="VarChar(100)")>  _
	Public Property CONTRA() As String
		Get
			Return Me._CONTRA
		End Get
		Set
			If (String.Equals(Me._CONTRA, value) = false) Then
				Me.OnCONTRAChanging(value)
				Me.SendPropertyChanging
				Me._CONTRA = value
				Me.SendPropertyChanged("CONTRA")
				Me.OnCONTRAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPERSONA", DbType:="Int")>  _
	Public Property IIDPERSONA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDPERSONA
		End Get
		Set
			If (Me._IIDPERSONA.Equals(value) = false) Then
				If Me._Persona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDPERSONAChanging(value)
				Me.SendPropertyChanging
				Me._IIDPERSONA = value
				Me.SendPropertyChanged("IIDPERSONA")
				Me.OnIIDPERSONAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDTIPOUSUARIO", DbType:="Int")>  _
	Public Property IIDTIPOUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDTIPOUSUARIO
		End Get
		Set
			If (Me._IIDTIPOUSUARIO.Equals(value) = false) Then
				If Me._TipoUsuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDTIPOUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDTIPOUSUARIO = value
				Me.SendPropertyChanged("IIDTIPOUSUARIO")
				Me.OnIIDTIPOUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cita", Storage:="_Cita", ThisKey:="IIDUSUARIO", OtherKey:="IIDDOCTORASIGNACITAUSUARIO")>  _
	Public Property Cita() As EntitySet(Of Cita)
		Get
			Return Me._Cita
		End Get
		Set
			Me._Cita.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Cita1", Storage:="_Cita1", ThisKey:="IIDUSUARIO", OtherKey:="IIDUSUARIO")>  _
	Public Property Cita1() As EntitySet(Of Cita)
		Get
			Return Me._Cita1
		End Get
		Set
			Me._Cita1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Mascota", Storage:="_Mascota", ThisKey:="IIDUSUARIO", OtherKey:="IIDUSUARIOPROPIETARIO")>  _
	Public Property Mascota() As EntitySet(Of Mascota)
		Get
			Return Me._Mascota
		End Get
		Set
			Me._Mascota.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_UsuarioMascota", Storage:="_UsuarioMascota", ThisKey:="IIDUSUARIO", OtherKey:="IIDUSUARIO")>  _
	Public Property UsuarioMascota() As EntitySet(Of UsuarioMascota)
		Get
			Return Me._UsuarioMascota
		End Get
		Set
			Me._UsuarioMascota.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoUsuario_Usuario", Storage:="_TipoUsuario", ThisKey:="IIDTIPOUSUARIO", OtherKey:="IIDTIPOUSUARIO", IsForeignKey:=true)>  _
	Public Property TipoUsuario() As TipoUsuario
		Get
			Return Me._TipoUsuario.Entity
		End Get
		Set
			Dim previousValue As TipoUsuario = Me._TipoUsuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoUsuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoUsuario.Entity = Nothing
					previousValue.Usuario.Remove(Me)
				End If
				Me._TipoUsuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuario.Add(Me)
					Me._IIDTIPOUSUARIO = value.IIDTIPOUSUARIO
				Else
					Me._IIDTIPOUSUARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoUsuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Persona_Usuario", Storage:="_Persona", ThisKey:="IIDPERSONA", OtherKey:="IIDPERSONA", IsForeignKey:=true)>  _
	Public Property Persona() As Persona
		Get
			Return Me._Persona.Entity
		End Get
		Set
			Dim previousValue As Persona = Me._Persona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Persona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Persona.Entity = Nothing
					previousValue.Usuario.Remove(Me)
				End If
				Me._Persona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuario.Add(Me)
					Me._IIDPERSONA = value.IIDPERSONA
				Else
					Me._IIDPERSONA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Persona")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Cita(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Cita1(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Usuario1 = Me
	End Sub
	
	Private Sub detach_Cita1(ByVal entity As Cita)
		Me.SendPropertyChanging
		entity.Usuario1 = Nothing
	End Sub
	
	Private Sub attach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Mascota(ByVal entity As Mascota)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_UsuarioMascota(ByVal entity As UsuarioMascota)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_UsuarioMascota(ByVal entity As UsuarioMascota)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UsuarioMascota")>  _
Partial Public Class UsuarioMascota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IIDPERSONAMASCOTA As Integer
	
	Private _IIDUSUARIO As System.Nullable(Of Integer)
	
	Private _IIDMASCOTA As System.Nullable(Of Integer)
	
	Private _BHABILITADO As System.Nullable(Of Integer)
	
	Private _Mascota As EntityRef(Of Mascota)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIIDPERSONAMASCOTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIIDPERSONAMASCOTAChanged()
    End Sub
    Partial Private Sub OnIIDUSUARIOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDUSUARIOChanged()
    End Sub
    Partial Private Sub OnIIDMASCOTAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIIDMASCOTAChanged()
    End Sub
    Partial Private Sub OnBHABILITADOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBHABILITADOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mascota = CType(Nothing, EntityRef(Of Mascota))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDPERSONAMASCOTA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IIDPERSONAMASCOTA() As Integer
		Get
			Return Me._IIDPERSONAMASCOTA
		End Get
		Set
			If ((Me._IIDPERSONAMASCOTA = value)  _
						= false) Then
				Me.OnIIDPERSONAMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDPERSONAMASCOTA = value
				Me.SendPropertyChanged("IIDPERSONAMASCOTA")
				Me.OnIIDPERSONAMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDUSUARIO", DbType:="Int")>  _
	Public Property IIDUSUARIO() As System.Nullable(Of Integer)
		Get
			Return Me._IIDUSUARIO
		End Get
		Set
			If (Me._IIDUSUARIO.Equals(value) = false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDUSUARIOChanging(value)
				Me.SendPropertyChanging
				Me._IIDUSUARIO = value
				Me.SendPropertyChanged("IIDUSUARIO")
				Me.OnIIDUSUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IIDMASCOTA", DbType:="Int")>  _
	Public Property IIDMASCOTA() As System.Nullable(Of Integer)
		Get
			Return Me._IIDMASCOTA
		End Get
		Set
			If (Me._IIDMASCOTA.Equals(value) = false) Then
				If Me._Mascota.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIIDMASCOTAChanging(value)
				Me.SendPropertyChanging
				Me._IIDMASCOTA = value
				Me.SendPropertyChanged("IIDMASCOTA")
				Me.OnIIDMASCOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BHABILITADO", DbType:="Int")>  _
	Public Property BHABILITADO() As System.Nullable(Of Integer)
		Get
			Return Me._BHABILITADO
		End Get
		Set
			If (Me._BHABILITADO.Equals(value) = false) Then
				Me.OnBHABILITADOChanging(value)
				Me.SendPropertyChanging
				Me._BHABILITADO = value
				Me.SendPropertyChanged("BHABILITADO")
				Me.OnBHABILITADOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mascota_UsuarioMascota", Storage:="_Mascota", ThisKey:="IIDMASCOTA", OtherKey:="IIDMASCOTA", IsForeignKey:=true)>  _
	Public Property Mascota() As Mascota
		Get
			Return Me._Mascota.Entity
		End Get
		Set
			Dim previousValue As Mascota = Me._Mascota.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Mascota.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Mascota.Entity = Nothing
					previousValue.UsuarioMascota.Remove(Me)
				End If
				Me._Mascota.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UsuarioMascota.Add(Me)
					Me._IIDMASCOTA = value.IIDMASCOTA
				Else
					Me._IIDMASCOTA = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Mascota")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_UsuarioMascota", Storage:="_Usuario", ThisKey:="IIDUSUARIO", OtherKey:="IIDUSUARIO", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.UsuarioMascota.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UsuarioMascota.Add(Me)
					Me._IIDUSUARIO = value.IIDUSUARIO
				Else
					Me._IIDUSUARIO = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
